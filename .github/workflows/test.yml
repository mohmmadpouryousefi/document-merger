name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: macos-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov reportlab

    - name: Run unit tests
      run: |
        python -m pytest tests/test_pdf_merger.py tests/test_excel_merger.py tests/test_file_merger.py -v --cov=src --cov-report=xml

    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-installation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Test installation process
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python test_installation.py

    - name: Test bookmark fix
      run: |
        python test_bookmark_fix.py

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run dependency security check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || true

  build-docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate documentation structure
      run: |
        # Check that all documentation files exist
        test -f docs/README.md
        test -f docs/examples/getting_started.md
        test -f docs/api/README.md
        test -f docs/troubleshooting.md

    - name: Test documentation examples
      run: |
        # Test that code examples in documentation are valid Python
        python -c "
        import ast
        import re
        
        def extract_python_code(file_path):
            with open(file_path, 'r') as f:
                content = f.read()
            
            # Extract Python code blocks
            pattern = r'```python\n(.*?)\n```'
            matches = re.findall(pattern, content, re.DOTALL)
            
            for i, code in enumerate(matches):
                try:
                    ast.parse(code)
                    print(f'✓ Code block {i+1} in {file_path} is valid')
                except SyntaxError as e:
                    print(f'✗ Code block {i+1} in {file_path} has syntax error: {e}')
                    return False
            return True
        
        # Check documentation files
        docs_files = [
            'docs/examples/python_api_examples.md',
            'docs/api/pdf_merger.md'
        ]
        
        all_valid = True
        for doc_file in docs_files:
            try:
                if not extract_python_code(doc_file):
                    all_valid = False
            except FileNotFoundError:
                print(f'Warning: {doc_file} not found')
        
        if not all_valid:
            exit(1)
        print('All documentation code examples are valid!')
        "

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest reportlab

    - name: Run performance tests
      run: |
        python -m pytest tests/test_integration.py::TestDocumentMergerIntegration::test_performance_benchmarking -v -s

    - name: Create performance report
      run: |
        echo "Performance test completed on $(date)" > performance-report.txt
        echo "Platform: Ubuntu Latest, Python 3.10" >> performance-report.txt

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.txt

  release-check:
    runs-on: ubuntu-latest
    needs: [test, test-installation, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Create release notes
      if: contains(github.event.head_commit.message, '[release]')
      run: |
        echo "# Release Notes" > release-notes.md
        echo "" >> release-notes.md
        echo "**Commit:** ${{ github.sha }}" >> release-notes.md
        echo "**Date:** $(date)" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Changes" >> release-notes.md
        echo "${{ github.event.head_commit.message }}" >> release-notes.md

    - name: Upload release notes
      if: contains(github.event.head_commit.message, '[release]')
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md
